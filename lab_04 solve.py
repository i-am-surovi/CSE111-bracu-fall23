# -*- coding: utf-8 -*-
"""Lab 04.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k5v1iZRlzOk7qPDU6OAC4q9o-FG4OwT9
"""

# Task 1
class Student:
    def __init__(self, name, ID, dept="CSE"):
        self.name = name
        self.ID = ID
        self.dept = dept

    def dailyEffort(self, hours):
        self.hours = hours

    def printDetails(self):
        print(f"Name: {self.name}")
        print(f"ID: {self.ID}")
        print(f"Department: {self.dept}")
        print(f"Daily Effort: {self.hours} hour(s)")

        if self.hours <= 2:
            print("Suggestion: Should give more effort!")
        elif self.hours <= 4:
            print("Suggestion: Keep up the good work!")
        else:
            print("Suggestion: Execellent! Now motivate others.")


# Driver Code
harry = Student('Harry Potter', 123)
harry.dailyEffort(3)
harry.printDetails()
print('========================')
john = Student("John Wick", 456, "BBA")
john.dailyEffort(2)
john.printDetails()
print('========================')
naruto = Student("Naruto Uzumaki", 777, "Ninja")
naruto.dailyEffort(6)
naruto.printDetails()

# Task 2
class Farmer():
  crops = []
  fishes = []

  def __init__(self, f = None):
    if type(f) == str:
      self.name = f
      print(f"Welcome to your farm, {self.name}!")
    elif type(f) == int:
      self.id = f
      print(f"Welcome to your farm. Your farm ID is {self.id}!")
    else:
      print("Welcome to your farm!")

  def addCrops(self, *args):
    count = 0
    if len(args) != 0:
      for i in args:
        count += 1
        Farmer.crops.append(i)
      print(f"{count} crop(s) added.")
    else:
      print("No crop(s) added.")

  def showGoods(self):
    if len(Farmer.crops) == 0:
      print("You don't have any crop(s).")
    else:
      print(f"You have {len(Farmer.crops)} crop(s):")
      print(",".join(i for i in Farmer.crops))

    if len(Farmer.fishes) == 0:
      print("You don't have any fish(s).")
    else:
      print(f"You have {len(Farmer.fishes)} fish(s):")
      print(",".join(i for i in Farmer.fishes))
    Farmer.crops.clear()
    Farmer.fishes.clear()

  def addFishes(self, *args):
    count = 0
    if len(args) != 0:
      for i in args:
        count += 1
        Farmer.fishes.append(i)
      print(f"{count} fish(s) added.")
    else:
      print("No fish added.")

# Driver Code
f1 = Farmer()
print("-------------------")
f1.addCrops('Rice', "Jute", "Cinnamon")
print("-------------------")
f1.addFishes()
print("-------------------")
f1.addCrops('Mustard')
print("-------------------")
f1.showGoods()
print("-------------------")
f2 = Farmer("Korim Mia")
print("-------------------")
f2.addFishes('Pangash', 'Magur')
print("-------------------")
f2.addCrops("Wheat", "Potato")
print("-------------------")
f2.addFishes("Koi", "Tuna", "Sardine")
print("-------------------")
f2.showGoods()
print("-------------------")
f3 = Farmer(2865127000)
print("-------------------")
f3.addCrops()
print("-------------------")
f3.addFishes("Katla")
print("-------------------")
f3.showGoods()
print("-------------------")

# Task 3
class TaxiLagbe:
  def __init__(self, taxi_number,location):
    self.taxi_number = taxi_number
    self.location = location
    self.fair = 0
    self.passengers = []

  def addPassenger(self, *arg):
    if len(self.passengers) == 4:
      print("Taxi Full! No more passengers can be added.")
      return
    for i in arg:
      name, fair = i.split("_")
      self.fair+=int(fair)
      self.passengers.append(name)

      print(f"Dear {name}! Welcome to TaxiLagbe. ")

  def printDetails(self):
    print("Trip info for Taxi number:",self.taxi_number)
    print("This taxi can cover only",self.location,"area.")
    print("Total passengers:",len(self.passengers))
    print("Passenger lists: ")
    # Passenger lists:
    print(*self.passengers, sep=", ")
    print("Total collected fare:",self.fair,"Taka")

# Driver Code
taxi1 = TaxiLagbe('1010-01', 'Dhaka')
print('-------------------------------')
taxi1.addPassenger('Walker_100', 'Wood_200','Matt_100')
taxi1.addPassenger('Wilson_105')
print('-------------------------------')
taxi1.printDetails()
print('-------------------------------')
taxi1.addPassenger('Karen_200')
print('-------------------------------')
taxi1.printDetails()
print('-------------------------------')
taxi2 = TaxiLagbe('1010-02', 'Khulna')
taxi2.addPassenger('Ronald_115', 'Parker_215')
print('-------------------------------')
taxi2.printDetails()

# Task 4
class Sphere:
  def __init__(self, name, r = 1, color = "White"):
    self.name = name
    self.r = r
    self.color = color
    self.volume = 4/3 * 3.1416 * (self.r**3)

  def printDetails(self):
    print(f"Sphere ID: {self.name}")
    print(f"Color: {self.color}")
    print(f"Volume: {self.volume}")

  def merge_sphere(self,*args):
    for i in args:
      self.volume += i.volume
      if i.color != self.color:
        self.color = "Mixed Color"
    print("Spheres are being merged")


# Driver Code
sphere1 = Sphere("Sphere 1")
print("1***************")
sphere1.printDetails()
print("2***************")
sphere2 = Sphere("Sphere 2", 3)
print("3***************")
sphere2.printDetails()
print("4***************")
sphere3 = Sphere("Sphere 3", 2)
print("5***************")
sphere3.printDetails()
print("6***************")
sphere3.merge_sphere(sphere1,sphere2)
print("7***************")
sphere3.printDetails()
print("8***************")
sphere4 = Sphere("Sphere 4", 5, "Purple")
print("9***************")
sphere4.merge_sphere(sphere3)
print("10***************")
sphere4.printDetails()

# Task 5

class ABC:
    def __init__(self):
        self.x = 3
        self.y = 7
        self.sum = 0
    def methodA(self, x):
        self.y = x + self.sum + self.x
        self.sum = x + self.y
        z = ABC()
        z.sum = self.sum + self.y
        self.methodB(z)
        print(self.x, self.y, self.sum)
    def methodB(self, a):
        y = 3
        a.x = self.x + self.sum
        self.sum = a.x + a.y + y
        print(a.x, a.y, a.sum)


# Driver Code
a = ABC()
a.methodA(5)